PARSER_BEGIN(Pascal)
import java.io.*;
public class Pascal {

  public static void main (String args[]) throws ParseException,IOException {
    
    Pascal parser = new Pascal (new FileInputStream(args[0]));
    parser.programa ();
  }
}

PARSER_END(Pascal)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN :
{
  <PROGRAM: "program">
| <INTEIRO: "integer">
| <REAL: "real">
| <VAR: "var">
| <OF: "of">
| <FUNCTION: "function">
| <PROCEDURE: "procedure">
| <LBRACE: "(">
| <RBRACE: ")">
| <SEMI: ";">
| <TWOP: ":">
| <ARRAY: "array">
| <BEGIN: "begin">
| <END: "end">
| <COMMA: ",">
| <IF: "if">
| <DO: "do">
| <NOT: "not">
| <ELSE: "else">
| <THEN: "then">
| <WHILE: "while">
| <RBRACKET: "[">
| <LBRACKET: "]">
| <WN: "..">
}

TOKEN :
{
 <OPERADOR_MULTIPLICATIVO: ("*"|"/"|"div"|"mod"|"and") >
|
 <OPERADOR_ADITIVO: ("+"| "-" | "or") >
|
 <ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* >
|
 <NUM: (["0"-"9"])+ ( "." (["0"-"9"])+ )? ( "E" ("+"|"-")? (["0"-"9"])+ )? >
|
 <OPERADOR_RELACIONAL: ("="|"<>"|"<"|"<="|">="|">") > 
|
 <OPERADOR_DE_ATRIBUICAO: ":=" >
|
 <SINAIS: ("+" | "-")> 
}

void programa():
{}
{ <PROGRAM> <ID> <LBRACE> lista_de_identificadores () <RBRACE> <SEMI> 
   declaracoes () 
   declaracoes_de_subprogramas () 
   enunciado_composto () 
   "."
  <EOF> 
}

void lista_de_identificadores():
{}
{
  <ID> lista2 ()
}

void lista2():
{}
{
 ("," <ID> lista2())?
}

void declaracoes():
{}
{
 d2 ()
}

void d2():
{}
{
 (<VAR> lista_de_identificadores () <TWOP> tipo () <SEMI> d2 ())?
}

void tipo():
{}
{
 tipo_padrao () | ( <ARRAY> <LBRACKET> <NUM> <WN> <NUM> <RBRACKET> <OF> tipo_padrao () )
}

void tipo_padrao():
{}
{
 <INTEIRO> | <REAL>
}

void declaracoes_de_subprogramas():
{}
{
 ds2 ()
}

void ds2():
{}
{
 (declaracao_de_subprograma ()  <SEMI> ds2 ())?
}

void declaracao_de_subprograma():
{}
{
 cabecalho_de_subprograma () declaracoes () enunciado_composto ()
}

void cabecalho_de_subprograma():
{}
{
 <FUNCTION> <ID> argumentos () <TWOP> tipo_padrao () <SEMI>
|
 <PROCEDURE> <ID> argumentos () <SEMI>
}

void argumentos():
{}
{
 (<LBRACE> lista_de_parametros () <RBRACE>)?
}

void lista_de_parametros():
{}
{
 lista_de_identificadores () <TWOP> tipo () lista_de_parametros2 ()
}

void lista_de_parametros2():
{}
{
 (<TWOP> lista_de_identificadores () <TWOP> tipo () lista_de_parametros2 ())?
}

void enunciado_composto():
{}
{
 <BEGIN> enunciados_opcionais () <END>
} 

void enunciados_opcionais():
{}
{
 (lista_de_enunciados ())?
}

void lista_de_enunciados():
{}
{
 enunciado () lista_de_enunciados2 ()
}

void lista_de_enunciados2():
{}
{
 (<SEMI> enunciado () lista_de_enunciados2 ())?
}

void enunciado():
{}
{
 <ID> e2 ()
|
 enunciado_composto ()
|
 <IF> expressao () <THEN> enunciado () <ELSE> enunciado ()
|
 <WHILE> expressao () <DO> enunciado ()
}

void e2():
{}
{
 variavel () <OPERADOR_DE_ATRIBUICAO> expressao () | chamada_de_procedimento () 
}

void variavel():
{}
{
 v2 ()
}

void v2():
{}
{
 (<LBRACKET> expressao () <RBRACKET>)?
}

void chamada_de_procedimento():
{}
{
 cp2 ()
}

void cp2():
{}
{
 (<LBRACE> lista_de_expressoes () <RBRACE>)?
}

void lista_de_expressoes():
{}
{
 expressao () lista_de_expressoes2 ()
}

void lista_de_expressoes2():
{}
{
 (<COMMA> expressao () lista_de_expressoes2 ())? 
}

void expressao():
{}
{
 expressao_simples () expressao2 ()
}

void expressao2():
{}
{
 (<OPERADOR_RELACIONAL> expressao_simples ())?
}

void expressao_simples():
{}
{
 es2 () es3 () 
}

void es3():
{}
{
 (<OPERADOR_ADITIVO> termo () es3 ())?
}

void es2():
{}
{
 termo () | sinal () termo ()
}

void termo():
{}
{
 fator () t2 ()
}

void t2():
{}
{
 (<OPERADOR_MULTIPLICATIVO> fator () t2 ())?
}

void fator():
{}
{
 <ID> fator2 () | <NUM> | <LBRACE> expressao () <RBRACE> | <NOT> fator ()
}

void fator2():
{}
{
 (<LBRACE> lista_de_expressoes () <RBRACE>)?
}

void sinal():
{}
{
 <SINAIS>
}

